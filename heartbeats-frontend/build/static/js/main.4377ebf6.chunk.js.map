{"version":3,"sources":["Components/GraphComponent.jsx","Components/HomePage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["GraphComponent","props","addItem","lastVal","lastX","newY","newX","state","hrReadings","length","maxReadings","xAxis","slice","concat","setState","options","elements","point","radius","plugins","legend","display","scales","x","y","suggestedMin","suggestedMax","data","labels","this","datasets","fill","backgroundColor","borderColor","borderWidth","tension","className","onClick","React","Component","HomePage","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA+BRC,QAAU,WACR,IAAIC,EAAU,EACVC,EAAQ,EACRC,EAAO,EACPC,EAAO,EAEP,EAAKC,MAAMC,WAAWC,QAAU,EAAKF,MAAMG,aAC7CP,EAAU,EAAKI,MAAMC,WAAW,GAChCJ,EAAQ,EAAKG,MAAMI,MAAM,GACzBN,EAAO,EAAKE,MAAMC,WAAWI,MAAM,GAAGC,OAAOV,EAAU,IACvDG,EAAO,EAAKC,MAAMI,MAAMC,MAAM,GAAGC,OAAOT,EAAQ,MAEhDD,EAAU,EAAKI,MAAMC,WAAW,EAAKD,MAAMC,WAAWC,OAAS,GAC/DL,EAAQ,EAAKG,MAAMI,MAAM,EAAKJ,MAAMI,MAAMF,OAAS,GACnDJ,EAAO,EAAKE,MAAMC,WAAWK,OAAOV,EAAU,IAC9CG,EAAO,EAAKC,MAAMI,MAAME,OAAOT,EAAQ,KAGzC,EAAKU,SAAS,CAAEH,MAAOL,EAAME,WAAYH,KA/CzC,EAAKE,MAAQ,CACXC,WAAY,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,KAClCG,MAAO,CAAC,EAAG,GAAK,EAAG,IAAK,EAAG,KAC3BD,YAAa,GACbK,QAAS,CACPC,SAAU,CACRC,MAAO,CACLC,OAAQ,IAGZC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbC,OAAQ,CACNC,EAAG,CACDF,SAAS,GAEXG,EAAG,CACDH,SAAS,EACTI,aAAc,GACdC,aAAc,QAzBL,E,0CAqDnB,WACE,IAAMC,EAAO,CACXC,OAAQC,KAAKtB,MAAMI,MACnBmB,SAAU,CACR,CACEH,KAAME,KAAKtB,MAAMC,WACjBuB,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,oBACbC,YAAa,EACbC,QAAS,MAKf,OACE,sBAAKC,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,YAAYrB,QAASc,KAAKtB,MAAMQ,QAASY,KAAMA,IAC/D,wBAAQS,UAAU,YAAYC,QAASR,KAAK3B,QAA5C,8B,GAxEoCoC,IAAMC,WCA7BC,E,kDACjB,WAAYvC,GAAO,uCACTA,G,0CAGV,WACI,OACI,sBAAKmC,UAAU,cAAf,UACI,qBAAKA,UAAU,iBAAf,4BACA,cAAC,EAAD,W,GATsBE,IAAMC,W,eCEvBE,E,kDACnB,WAAYxC,GAAQ,uCACZA,G,0CAGR,WACE,OAAO,qBAAKmC,UAAU,MAAf,SACL,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOM,KAAK,IAAIC,QAAS,cAAC,EAAD,gB,GATFL,IAAMC,WCOxBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4377ebf6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nexport default class GraphComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hrReadings: [90, 90, 90, 90, 130, 130], // List containing the heart rate readings to display in the graph (y axis)\n      xAxis: [0, 0.5, 1, 1.5, 2, 2.5],\n      maxReadings: 10, // Maximum # of readings stored in the hrReadings (simulate motion of the graph)\n      options: {\n        elements: {\n          point: {\n            radius: 0,\n          },\n        },\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n        scales: {\n          x: {\n            display: false,\n          },\n          y: {\n            display: false,\n            suggestedMin: 40,\n            suggestedMax: 200,\n          },\n        },\n      },\n    };\n  }\n\n  addItem = () => {\n    var lastVal = 0;\n    var lastX = 0;\n    var newY = 0;\n    var newX = 0;\n\n    if (this.state.hrReadings.length >= this.state.maxReadings) {\n      lastVal = this.state.hrReadings[9];\n      lastX = this.state.xAxis[9];\n      newY = this.state.hrReadings.slice(1).concat(lastVal + 20);\n      newX = this.state.xAxis.slice(1).concat(lastX + 0.5);\n    } else {\n      lastVal = this.state.hrReadings[this.state.hrReadings.length - 1];\n      lastX = this.state.xAxis[this.state.xAxis.length - 1];\n      newY = this.state.hrReadings.concat(lastVal + 20);\n      newX = this.state.xAxis.concat(lastX + 0.5);\n    }\n\n    this.setState({ xAxis: newX, hrReadings: newY });\n  };\n\n  render() {\n    const data = {\n      labels: this.state.xAxis,\n      datasets: [\n        {\n          data: this.state.hrReadings,\n          fill: false,\n          backgroundColor: \"rgb(255, 99, 132)\",\n          borderColor: \"rgb(255, 99, 132)\",\n          borderWidth: 5,\n          tension: 0.2,\n        },\n      ],\n    };\n\n    return (\n      <div className=\"graphContainer\">\n        <Line className=\"lineGraph\" options={this.state.options} data={data} />\n        <button className=\"addButton\" onClick={this.addItem}>Add Point</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\n\nexport default class HomePage extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        return(\n            <div className=\"mainContent\">\n                <div className=\"albumContainer\">HERES AN ALBUM</div>\n                <GraphComponent/>\n            </div>\n        );\n    }\n}","import \"./App.css\";\nimport React from \"react\";\nimport HomeComponent from \"./Components/HomePage\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <div className=\"App\">\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<HomeComponent/>}/>\n        </Routes>\n      </Router>\n    </div>;\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}