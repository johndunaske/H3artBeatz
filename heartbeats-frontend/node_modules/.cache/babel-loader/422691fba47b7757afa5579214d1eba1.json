{"ast":null,"code":"var _jsxFileName = \"/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/GraphComponent.jsx\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GraphComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addItem = () => {\n      var lastVal = 0;\n      var lastX = 0;\n      var newY = 0;\n      var newX = 0;\n\n      if (this.state.hrReadings.length >= this.state.maxReadings) {\n        lastVal = this.state.hrReadings[9];\n        lastX = this.state.xAxis[9]; //newY = this.state.hrReadings.slice(1)//.push(lastVal + 1);\n        //newX = this.state.xAxis.slice(1)//.push(lastX + 0.5);\n        //this.setState({ xAxis: newX, hrReadings: newY });\n      } else {\n        lastVal = this.state.hrReadings[this.state.hrReadings - 1];\n        lastX = this.state.xAxis[this.state.hrReadings - 1];\n        console.log(lastVal); //newY = this.state.hrReadings.push(lastVal + 1);\n        //newX = this.state.xAxis.push(lastX + 0.5);\n        //this.setState({ xAxis: newX, hrReadings: newY });\n      }\n    };\n\n    this.state = {\n      hrReadings: [90, 90, 90, 90, 130, 130],\n      // List containing the heart rate readings to display in the graph (y axis)\n      xAxis: [0, 0.5, 1, 1.5, 2, 2.5],\n      maxReadings: 10,\n      // Maximum # of readings stored in the hrReadings (simulate motion of the graph)\n      options: {\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            display: false\n          },\n          y: {\n            display: false,\n            suggestedMin: 40,\n            suggestedMax: 200\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    const data = {\n      labels: this.state.xAxis,\n      datasets: [{\n        data: this.state.hrReadings,\n        fill: false,\n        backgroundColor: \"rgb(255, 99, 132)\",\n        borderColor: \"rgb(255, 99, 132)\",\n        borderWidth: 5,\n        tension: 0.2\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        className: \"lineGraph\",\n        options: this.state.options,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addItem,\n        children: \"Add Point\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/GraphComponent.jsx"],"names":["React","Line","GraphComponent","Component","constructor","props","addItem","lastVal","lastX","newY","newX","state","hrReadings","length","maxReadings","xAxis","console","log","options","elements","point","radius","plugins","legend","display","scales","x","y","suggestedMin","suggestedMax","render","data","labels","datasets","fill","backgroundColor","borderColor","borderWidth","tension"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nexport default class GraphComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hrReadings: [90, 90, 90, 90, 130, 130], // List containing the heart rate readings to display in the graph (y axis)\n      xAxis: [0, 0.5, 1, 1.5, 2, 2.5],\n      maxReadings: 10, // Maximum # of readings stored in the hrReadings (simulate motion of the graph)\n      options: {\n        elements: {\n          point: {\n            radius: 0,\n          },\n        },\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n        scales: {\n          x: {\n            display: false,\n          },\n          y: {\n            display: false,\n            suggestedMin: 40,\n            suggestedMax: 200,\n          },\n        },\n      },\n    };\n  }\n\n  addItem = () => {\n    var lastVal = 0;\n    var lastX = 0;\n    var newY = 0;\n    var newX = 0;\n\n    if (this.state.hrReadings.length >= this.state.maxReadings) {\n      lastVal = this.state.hrReadings[9];\n      lastX = this.state.xAxis[9];\n      //newY = this.state.hrReadings.slice(1)//.push(lastVal + 1);\n      //newX = this.state.xAxis.slice(1)//.push(lastX + 0.5);\n      //this.setState({ xAxis: newX, hrReadings: newY });\n    } else {\n      lastVal = this.state.hrReadings[this.state.hrReadings - 1];\n      lastX = this.state.xAxis[this.state.hrReadings - 1];\n      console.log(lastVal);\n      //newY = this.state.hrReadings.push(lastVal + 1);\n      //newX = this.state.xAxis.push(lastX + 0.5);\n      //this.setState({ xAxis: newX, hrReadings: newY });\n    }\n  };\n\n  render() {\n    const data = {\n      labels: this.state.xAxis,\n      datasets: [\n        {\n          data: this.state.hrReadings,\n          fill: false,\n          backgroundColor: \"rgb(255, 99, 132)\",\n          borderColor: \"rgb(255, 99, 132)\",\n          borderWidth: 5,\n          tension: 0.2,\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Line className=\"lineGraph\" options={this.state.options} data={data} />\n        <button onClick={this.addItem}>Add Point</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}