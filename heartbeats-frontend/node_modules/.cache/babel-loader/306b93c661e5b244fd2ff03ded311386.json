{"ast":null,"code":"var _jsxFileName = \"/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx\";\nimport React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\"; // props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      if (this.state.favoritePlaylistId == null || this.state.favoritePlaylistLink == null) {\n        console.log(this.state);\n        return;\n      } else {\n        console.log(this.state);\n        var concat = this.state.tracks.concat([\"fdsaf\"]);\n        this.setState({\n          track: concat\n        }); // var url =\n        //   \"https://api.spotify.com/v1/playlists/\" +\n        //   this.state.favoritePlaylistId +\n        //   \"/tracks\";\n        // fetch(url, {\n        //   method: \"GET\",\n        //   headers: {\n        //     \"Content-Type\": \"application/json\",\n        //     Authorization: \"Bearer \" + this.props.token,\n        //   },\n        // })\n        //   .then((response) => response.json())\n        //.then((data) => {this.setState({ tracks: data.items })});\n\n        console.log(this.state.tracks);\n      }\n    };\n\n    this.displayAlbum = state => {\n      if (state && state.track && state.track.image) {\n        this.setState({\n          albumCover: state.track.image\n        });\n      }\n    };\n\n    this.state = {\n      tracks: [],\n      bpmMap: {},\n      favoritePlaylistLink: this.props.fPlaylist != null ? this.props.fPlaylist.uri : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId: this.props.fPlaylist != null ? this.props.fPlaylist.id : null,\n      albumCover: defaultImage\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContent\",\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {\n        logout: this.props.signout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentSong\",\n        children: this.state.currentSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"albumCover\",\n          src: this.state.albumCover,\n          alt: defaultImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n        token: this.props.token,\n        callback: this.displayAlbum,\n        uris: [this.state.favoritePlaylistLink],\n        styles: {\n          bgColor: \"#000\",\n          sliderColor: \"#ff6384\",\n          trackArtistColor: \"#fff\",\n          trackNameColor: \"#fff\",\n          color: \"#fff\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx"],"names":["React","GraphComponent","defaultImage","TopBar","SpotifyPlayer","HomePage","Component","constructor","props","componentDidMount","state","favoritePlaylistId","favoritePlaylistLink","console","log","concat","tracks","setState","track","displayAlbum","image","albumCover","bpmMap","fPlaylist","uri","id","render","signout","currentSong","token","bgColor","sliderColor","trackArtistColor","trackNameColor","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\n// props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n      tracks: [],\n      bpmMap: {},\n      favoritePlaylistLink:\n        this.props.fPlaylist != null\n          ? this.props.fPlaylist.uri\n          : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId:\n        this.props.fPlaylist != null ? this.props.fPlaylist.id : null,\n      albumCover: defaultImage,\n    };\n  }\n\n  componentDidMount = () => {\n    if (\n      this.state.favoritePlaylistId == null ||\n      this.state.favoritePlaylistLink == null\n    ) {\n      console.log(this.state)\n      return;\n    } else {\n      console.log(this.state)\n      var concat = this.state.tracks.concat([\"fdsaf\"]);\n      this.setState({track: concat});\n      // var url =\n      //   \"https://api.spotify.com/v1/playlists/\" +\n      //   this.state.favoritePlaylistId +\n      //   \"/tracks\";\n      // fetch(url, {\n      //   method: \"GET\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      //     Authorization: \"Bearer \" + this.props.token,\n      //   },\n      // })\n      //   .then((response) => response.json())\n        //.then((data) => {this.setState({ tracks: data.items })});\n        console.log(this.state.tracks);\n    }\n  };\n  // var url =\n  //   \"https://api.spotify.com/v1/audio-features?ids=\" + idList.join();\n  // fetch(url, {\n  //   method: \"GET\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\",\n  //     Authorization: \"Bearer \" + this.props.token,\n  //   },\n  // })\n  //   .then((response) => response.json())\n  //   .then((data) => {\n  //     var createMap = {}\n  //     data.audio_features.forEach((track) => {\n  //       var tempo = track.tempo;\n  //       createMap[tempo] = track.uri;\n  //     })\n  //     return createMap\n  //     }).then((finished) => {\n  //       return finished\n  //     })\n\n  displayAlbum = (state) => {\n    if (state && state.track && state.track.image) {\n      this.setState({ albumCover: state.track.image });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"mainContent\">\n        <TopBar logout={this.props.signout} />\n        <div className=\"currentSong\">{this.state.currentSong}</div>\n        <div className=\"albumContainer\">\n          <img\n            className=\"albumCover\"\n            src={this.state.albumCover}\n            alt={defaultImage}\n          ></img>\n        </div>\n        <GraphComponent />\n        <SpotifyPlayer\n          token={this.props.token}\n          callback={this.displayAlbum}\n          uris={[this.state.favoritePlaylistLink]}\n          styles={{\n            bgColor: \"#000\",\n            sliderColor: \"#ff6384\",\n            trackArtistColor: \"#fff\",\n            trackNameColor: \"#fff\",\n            color: \"#fff\",\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}