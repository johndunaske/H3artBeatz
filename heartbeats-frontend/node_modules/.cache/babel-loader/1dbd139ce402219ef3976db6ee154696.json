{"ast":null,"code":"var _jsxFileName = \"/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx\";\nimport React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyAPI = new SpotifyWebApi(); // props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.createPlayer();\n    };\n\n    this.createPlayer = () => {\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        const player = new Spotify.Player({\n          name: \"Web Player\",\n          getOAuthToken: cb => {\n            cb(this.state.token);\n          },\n          volume: 0.5\n        });\n        player.addListener(\"ready\", _ref => {\n          let {\n            device_id\n          } = _ref;\n          console.log(\"ready with device id\", device_id);\n        });\n        player.addListener(\"not_ready\", _ref2 => {\n          let {\n            device_id\n          } = _ref2;\n          console.log(\"Device ID has gone offline\", device_id);\n        });\n        player.addListener(\"initialization_error\", _ref3 => {\n          let {\n            message\n          } = _ref3;\n          console.error(message);\n        });\n        player.addListener(\"authentication_error\", _ref4 => {\n          let {\n            message\n          } = _ref4;\n          console.error(message);\n        });\n        player.addListener(\"account_error\", _ref5 => {\n          let {\n            message\n          } = _ref5;\n          console.error(message);\n        });\n\n        document.getElementById(\"togglePlay\").onclick = function () {\n          player.togglePlay();\n        };\n\n        player.connect();\n      };\n    };\n\n    if (this.props.token) {\n      spotifyAPI.setAccessToken(this.props.token);\n    }\n\n    this.state = {\n      currentSong: \"\",\n      albumCover: defaultImage,\n      interval: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContent\",\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {\n        logout: this.props.signout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentSong\",\n        children: this.state.currentSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"albumCover\",\n          src: this.state.albumCover,\n          alt: defaultImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx"],"names":["React","GraphComponent","defaultImage","TopBar","SpotifyWebApi","spotifyAPI","HomePage","Component","constructor","props","componentDidMount","createPlayer","window","onSpotifyWebPlaybackSDKReady","player","Spotify","Player","name","getOAuthToken","cb","state","token","volume","addListener","device_id","console","log","message","error","document","getElementById","onclick","togglePlay","connect","setAccessToken","currentSong","albumCover","interval","render","signout"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst spotifyAPI = new SpotifyWebApi();\n\n// props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (this.props.token) {\n      spotifyAPI.setAccessToken(this.props.token);\n    }\n\n    this.state = {\n      currentSong: \"\",\n      albumCover: defaultImage,\n      interval: null,\n    };\n  }\n\n  componentDidMount = () => {\n    this.createPlayer();\n  }\n\n  createPlayer = () => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const player = new Spotify.Player({\n        name: \"Web Player\",\n        getOAuthToken: (cb) => {\n          cb(this.state.token);\n        },\n        volume: 0.5,\n      });\n\n      player.addListener(\"ready\", ({ device_id }) => {\n        console.log(\"ready with device id\", device_id);\n      });\n\n      player.addListener(\"not_ready\", ({ device_id }) => {\n        console.log(\"Device ID has gone offline\", device_id);\n      });\n\n      player.addListener(\"initialization_error\", ({ message }) => {\n        console.error(message);\n      });\n\n      player.addListener(\"authentication_error\", ({ message }) => {\n        console.error(message);\n      });\n\n      player.addListener(\"account_error\", ({ message }) => {\n        console.error(message);\n      });\n\n      document.getElementById(\"togglePlay\").onclick = function () {\n        player.togglePlay();\n      };\n\n      player.connect();\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"mainContent\">\n        <TopBar logout={this.props.signout} />\n        <div className=\"currentSong\">{this.state.currentSong}</div>\n        <div className=\"albumContainer\">\n          <img\n            className=\"albumCover\"\n            src={this.state.albumCover}\n            alt={defaultImage}\n          ></img>\n        </div>\n        <GraphComponent />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}