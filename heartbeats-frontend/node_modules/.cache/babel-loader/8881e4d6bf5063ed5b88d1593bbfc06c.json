{"ast":null,"code":"var _jsxFileName = \"/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx\";\nimport React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\"; // props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket;\nvar count = 0;\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getTracks = () => {\n      var url = `https://api.spotify.com/v1/playlists/${this.state.favoritePlaylistId}/tracks`;\n      fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + this.props.token\n        }\n      }).then(response => response.json()).then(data => {\n        let temp = [];\n\n        for (let i of data.items) {\n          temp.push(i);\n        }\n\n        this.setState({\n          tracks: temp\n        });\n      });\n    };\n\n    this.componentDidMount = () => {\n      // socket = new WebSocket(\"wss://h3artbeatz.herokuapp.com/websocket\");\n      // socket.addEventListener(\"open\", (event) => {\n      //   console.log(\"Websocket Connected!\");\n      // });\n      // socket.addEventListener(\"message\", (event) => {\n      //   var data = JSON.parse(event.BPM);\n      //   var newList =[];\n      //   if (this.state.avg.length < 15) {\n      //     newList = this.state.avg.concat([data]);\n      //     this.setState({avg:newList});\n      //   }\n      //   if (this.state.avg.length >= 15) {\n      //     var sum = 0;\n      //     for (var i = 0; i < 15; i++) {\n      //       sum += this.state.avg[i]\n      //     }\n      //     var avgVal = sum / 15\n      //     this.setState({avgCalc: avgVal});\n      //   }\n      //   if (count > 20) {\n      //     var newList = this.state.hrReadings.concat([data]);\n      //     var lastX = this.state.xAxis[this.state.xAxis.length - 1]\n      //     var newX = this.state.xAxis.concat(this.state.xAxis[lastX])\n      //     this.setState({hrReadings:newList});\n      //     this.setState({xAxis:lastX});\n      //     count = 0;\n      //   }\n      //   count++;\n      // });\n      // socket.addEventListener(\"close\", (event) => {\n      //   console.log(\"Websocket Disconnected!\");\n      // });\n      if (this.state.favoritePlaylistId != null && this.state.favoritePlaylistLink != null) {\n        let tracksVar = this.getTracks();\n        this.setState({\n          tracks: tracksVar\n        });\n      }\n    };\n\n    this.displayAlbum = state => {\n      if (state && state.track && state.track.image) {\n        this.setState({\n          albumCover: state.track.image\n        });\n      }\n    };\n\n    this.state = {\n      favoritePlaylistLink: this.props.fPlaylist != null ? this.props.fPlaylist.uri : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId: this.props.fPlaylist != null ? this.props.fPlaylist.id : null,\n      albumCover: defaultImage,\n      avg: [],\n      avgCalc: 0,\n      hrReadings: [100],\n      xAxis: [0],\n      tracks: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContent\",\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {\n        logout: this.props.signout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"albumCover\",\n          src: this.state.albumCover,\n          alt: defaultImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n        token: this.props.token,\n        callback: this.displayAlbum,\n        uris: [this.state.favoritePlaylistLink],\n        styles: {\n          bgColor: \"#000\",\n          sliderColor: \"#ff6384\",\n          trackArtistColor: \"#fff\",\n          trackNameColor: \"#fff\",\n          color: \"#fff\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx"],"names":["React","GraphComponent","defaultImage","TopBar","SpotifyPlayer","socket","count","HomePage","Component","constructor","props","getTracks","url","state","favoritePlaylistId","fetch","method","headers","token","then","response","json","data","temp","i","items","push","setState","tracks","componentDidMount","favoritePlaylistLink","tracksVar","displayAlbum","track","image","albumCover","fPlaylist","uri","id","avg","avgCalc","hrReadings","xAxis","render","signout","bgColor","sliderColor","trackArtistColor","trackNameColor","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\n// props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\n\nvar socket;\nvar count = 0;\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      favoritePlaylistLink:\n        this.props.fPlaylist != null\n          ? this.props.fPlaylist.uri\n          : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId:\n        this.props.fPlaylist != null ? this.props.fPlaylist.id : null,\n      albumCover: defaultImage,\n      avg: [],\n      avgCalc: 0,\n      hrReadings: [100],\n      xAxis: [0],\n      tracks:[],\n    };\n  }\n\n  getTracks = () => {\n    var url = `https://api.spotify.com/v1/playlists/${this.state.favoritePlaylistId}/tracks`\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.props.token,\n      }\n    }).then((response) => response.json())\n    .then(data => {\n      let temp = [];\n      for (let i of data.items) {\n        temp.push(i);\n      }\n      this.setState({tracks:temp});\n    })\n  }\n\n  componentDidMount = () => {\n    // socket = new WebSocket(\"wss://h3artbeatz.herokuapp.com/websocket\");\n\n    // socket.addEventListener(\"open\", (event) => {\n    //   console.log(\"Websocket Connected!\");\n    // });\n\n    // socket.addEventListener(\"message\", (event) => {\n    //   var data = JSON.parse(event.BPM);\n    //   var newList =[];\n    //   if (this.state.avg.length < 15) {\n    //     newList = this.state.avg.concat([data]);\n    //     this.setState({avg:newList});\n    //   }\n    //   if (this.state.avg.length >= 15) {\n    //     var sum = 0;\n    //     for (var i = 0; i < 15; i++) {\n    //       sum += this.state.avg[i]\n    //     }\n    //     var avgVal = sum / 15\n    //     this.setState({avgCalc: avgVal});\n    //   }\n    //   if (count > 20) {\n    //     var newList = this.state.hrReadings.concat([data]);\n    //     var lastX = this.state.xAxis[this.state.xAxis.length - 1]\n    //     var newX = this.state.xAxis.concat(this.state.xAxis[lastX])\n    //     this.setState({hrReadings:newList});\n    //     this.setState({xAxis:lastX});\n    //     count = 0;\n    //   }\n\n    //   count++;\n    // });\n\n    // socket.addEventListener(\"close\", (event) => {\n    //   console.log(\"Websocket Disconnected!\");\n    // });\n\n    if (this.state.favoritePlaylistId != null && this.state.favoritePlaylistLink != null) {\n      let tracksVar = this.getTracks();\n      this.setState({tracks: tracksVar});\n    }\n  };\n\n  displayAlbum = (state) => {\n    if (state && state.track && state.track.image) {\n      this.setState({ albumCover: state.track.image });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"mainContent\">\n        <TopBar logout={this.props.signout} />\n        <div className=\"albumContainer\">\n          <img\n            className=\"albumCover\"\n            src={this.state.albumCover}\n            alt={defaultImage}\n          ></img>\n        </div>\n        <GraphComponent />\n        <SpotifyPlayer\n          token={this.props.token}\n          callback={this.displayAlbum}\n          uris={[this.state.favoritePlaylistLink]}\n          styles={{\n            bgColor: \"#000\",\n            sliderColor: \"#ff6384\",\n            trackArtistColor: \"#fff\",\n            trackNameColor: \"#fff\",\n            color: \"#fff\",\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}