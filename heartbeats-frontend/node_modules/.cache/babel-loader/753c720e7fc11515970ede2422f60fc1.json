{"ast":null,"code":"var _jsxFileName = \"/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx\";\nimport React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\"; // props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      if (this.state.favoritePlaylistId == null || this.state.favoritePlaylistLink == null) {\n        return;\n      } else {\n        this.getAllBPMS();\n      }\n\n      console.log(this.state.tracks);\n    };\n\n    this.updateBPM = map => {\n      this.setState({\n        bpmMap: map\n      });\n    };\n\n    this.getAllBPMS = () => {\n      var url = \"https://api.spotify.com/v1/playlists/\" + this.state.favoritePlaylistId + \"/tracks\";\n      fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.token\n        }\n      }).then(response => response.json()).then(data => this.setState({\n        tracks: data\n      }));\n    };\n\n    this.displayAlbum = state => {\n      if (state && state.track && state.track.image) {\n        this.setState({\n          albumCover: state.track.image\n        });\n      }\n    };\n\n    this.state = {\n      favoritePlaylistLink: this.props.fPlaylist != null ? this.props.fPlaylist.uri : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId: this.props.fPlaylist != null ? this.props.fPlaylist.id : null,\n      albumCover: defaultImage,\n      tracks: [],\n      bpmMap: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContent\",\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {\n        logout: this.props.signout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentSong\",\n        children: this.state.currentSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"albumCover\",\n          src: this.state.albumCover,\n          alt: defaultImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n        token: this.props.token,\n        callback: this.displayAlbum,\n        uris: [this.state.favoritePlaylistLink],\n        styles: {\n          bgColor: \"#000\",\n          sliderColor: \"#ff6384\",\n          trackArtistColor: \"#fff\",\n          trackNameColor: \"#fff\",\n          color: \"#fff\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx"],"names":["React","GraphComponent","defaultImage","TopBar","SpotifyPlayer","HomePage","Component","constructor","props","componentDidMount","state","favoritePlaylistId","favoritePlaylistLink","getAllBPMS","console","log","tracks","updateBPM","map","setState","bpmMap","url","fetch","method","headers","Authorization","token","then","response","json","data","displayAlbum","track","image","albumCover","fPlaylist","uri","id","render","signout","currentSong","bgColor","sliderColor","trackArtistColor","trackNameColor","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\n// props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      favoritePlaylistLink:\n        this.props.fPlaylist != null\n          ? this.props.fPlaylist.uri\n          : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId:\n        this.props.fPlaylist != null ? this.props.fPlaylist.id : null,\n      albumCover: defaultImage,\n      tracks:[],\n      bpmMap: {},\n    };\n  }\n\n  componentDidMount = () => {\n    if (\n      this.state.favoritePlaylistId == null ||\n      this.state.favoritePlaylistLink == null\n    ) {\n      return;\n    } else {\n      this.getAllBPMS();\n    }\n\n    console.log(this.state.tracks);\n  };\n\n  updateBPM = (map) => {\n    this.setState({bpmMap:map})\n  }\n\n\n  getAllBPMS = () =>{\n    var url =\n      \"https://api.spotify.com/v1/playlists/\" +\n      this.state.favoritePlaylistId +\n      \"/tracks\";\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + this.props.token,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => this.setState({tracks:data}))\n  };\n// var url =\n        //   \"https://api.spotify.com/v1/audio-features?ids=\" + idList.join();\n        // fetch(url, {\n        //   method: \"GET\",\n        //   headers: {\n        //     \"Content-Type\": \"application/json\",\n        //     Authorization: \"Bearer \" + this.props.token,\n        //   },\n        // })\n        //   .then((response) => response.json())\n        //   .then((data) => {\n        //     var createMap = {}\n        //     data.audio_features.forEach((track) => {\n        //       var tempo = track.tempo;\n        //       createMap[tempo] = track.uri;\n        //     })\n        //     return createMap\n        //     }).then((finished) => {\n        //       return finished\n        //     })\n\n  displayAlbum = (state) => {\n    if (state && state.track && state.track.image) {\n      this.setState({ albumCover: state.track.image });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"mainContent\">\n        <TopBar logout={this.props.signout} />\n        <div className=\"currentSong\">{this.state.currentSong}</div>\n        <div className=\"albumContainer\">\n          <img\n            className=\"albumCover\"\n            src={this.state.albumCover}\n            alt={defaultImage}\n          ></img>\n        </div>\n        <GraphComponent />\n        <SpotifyPlayer\n          token={this.props.token}\n          callback={this.displayAlbum}\n          uris={[this.state.favoritePlaylistLink]}\n          styles={{\n            bgColor: \"#000\",\n            sliderColor: \"#ff6384\",\n            trackArtistColor: \"#fff\",\n            trackNameColor: \"#fff\",\n            color: \"#fff\",\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}