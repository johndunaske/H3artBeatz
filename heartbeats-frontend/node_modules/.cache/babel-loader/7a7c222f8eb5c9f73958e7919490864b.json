{"ast":null,"code":"var _jsxFileName = \"/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx\";\nimport React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\"; // props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      if (this.state.favoritePlaylistId == null || this.state.favoritePlaylistLink == null) {\n        return;\n      } else {\n        this.getAllBPMS();\n      }\n    };\n\n    this.getAllBPMS = () => {\n      var url = 'https://api.spotify.com/v1/playlists/' + this.state.favoritePlaylistId + '/tracks';\n      fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': 'Bearer ' + this.props.token\n        }\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n      });\n    };\n\n    this.displayAlbum = state => {\n      if (state && state.track && state.track.image) {\n        this.setState({\n          albumCover: state.track.image\n        });\n      }\n    };\n\n    this.state = {\n      favoritePlaylistLink: this.props.fPlaylist != null ? this.props.fPlaylist.uri : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId: this.props.fPlaylist != null ? this.props.fPlaylist.id : 0,\n      albumCover: defaultImage\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContent\",\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {\n        logout: this.props.signout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentSong\",\n        children: this.state.currentSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"albumCover\",\n          src: this.state.albumCover,\n          alt: defaultImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n        token: this.props.token,\n        callback: this.displayAlbum,\n        uris: [this.state.favoritePlaylistLink],\n        styles: {\n          bgColor: \"#000\",\n          sliderColor: \"#ff6384\",\n          trackArtistColor: \"#fff\",\n          trackNameColor: \"#fff\",\n          color: \"#fff\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnduna/Documents/GitHub/H3artBeatz/heartbeats-frontend/src/Components/HomePage.jsx"],"names":["React","GraphComponent","defaultImage","TopBar","SpotifyPlayer","HomePage","Component","constructor","props","componentDidMount","state","favoritePlaylistId","favoritePlaylistLink","getAllBPMS","url","fetch","method","headers","token","then","response","json","data","console","log","displayAlbum","track","image","setState","albumCover","fPlaylist","uri","id","render","signout","currentSong","bgColor","sliderColor","trackArtistColor","trackNameColor","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GraphComponent from \"./GraphComponent\";\nimport defaultImage from \"../Assets/testImage.jpg\";\nimport TopBar from \"./TopBar\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\n// props:\n// signout: function to remove spotify auth token cookie\n// token: spotify token\n// fPlaylist: favorite playlist\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      favoritePlaylistLink:this.props.fPlaylist != null ? this.props.fPlaylist.uri : \"spotify:artist:6HQYnRM4OzToCYPpVBInuU\",\n      favoritePlaylistId: this.props.fPlaylist != null ? this.props.fPlaylist.id : 0,\n      albumCover: defaultImage,\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.state.favoritePlaylistId == null || this.state.favoritePlaylistLink == null) {\n      return\n    } else {\n      this.getAllBPMS()\n    }\n  }\n\n  getAllBPMS = () => {\n    var url = 'https://api.spotify.com/v1/playlists/'+ this.state.favoritePlaylistId +'/tracks'\n    fetch(url, {\n      method: \"GET\",\n      headers:{\n        \"Content-Type\": \"application/json\",\n        'Authorization': 'Bearer ' + this.props.token,\n    }}).then((response) => response.json())\n    .then((data) => {\n      console.log(data)\n    })\n  }\n  \n  displayAlbum = (state) => {\n    if (\n      state &&\n      state.track &&\n      state.track.image\n    ) {\n      this.setState({ albumCover: state.track.image});\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"mainContent\">\n        <TopBar logout={this.props.signout}/>\n        <div className=\"currentSong\">{this.state.currentSong}</div>\n        <div className=\"albumContainer\">\n          <img\n            className=\"albumCover\"\n            src={this.state.albumCover}\n            alt={defaultImage}\n          ></img>\n        </div>\n        <GraphComponent />\n        <SpotifyPlayer\n          token={this.props.token}\n          callback={this.displayAlbum}\n          uris={[this.state.favoritePlaylistLink]}\n          styles={{\n            bgColor: \"#000\",\n            sliderColor: \"#ff6384\",\n            trackArtistColor: \"#fff\",\n            trackNameColor: \"#fff\",\n            color: \"#fff\",\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}